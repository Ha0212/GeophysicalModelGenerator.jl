var documenterSearchIndex = {"docs":
[{"location":"man/datastructures/#Data-structures","page":"Data Structures","title":"Data structures","text":"","category":"section"},{"location":"man/datastructures/","page":"Data Structures","title":"Data Structures","text":"The main data structure used in GeophysicalModelGenerator.jl is GeoData, which contains info about the latitude, longitude and depth of a data set, as well as several data sets itself.","category":"page"},{"location":"man/datastructures/","page":"Data Structures","title":"Data Structures","text":"GeophysicalModelGenerator.GeoData\nGeophysicalModelGenerator.LonLatDepthGrid","category":"page"},{"location":"man/datastructures/#GeophysicalModelGenerator.GeoData","page":"Data Structures","title":"GeophysicalModelGenerator.GeoData","text":"GeoData(lon::Any, lat:Any, depth::GeoUnit, fields::NamedTuple)\n\nData structure that holds one or several fields with longitude, latitude and depth information.\n\n`depth` can have units of meter, kilometer or be unitless; it will be converted to km.\n`fields` should ideally be a NamedTuple which allows you to specify the names of each of the fields. \n    If case you only pass one array we will convert it to a NamedTuple with default name\n    Note that this is added as `(DataFieldName=Data,)` (don't forget the comma at the end)\n    In case you want to display a vector field in paraview, add it as a tuple: \n    `(Velocity=(Veast,Vnorth,Vup), Veas=Veast, Vnorth=Vnorth, Vup=Vup)`. You should add the magnitude as \n    separate fields, in case you want to color this in paraview\n\n`lon`,`lat`,`depth` should all have the same size as each of the `fields`\n\nExample\n\njulia> Lat         =   1.0:10.0;\njulia> Lon         =   11.0:20.0;\njulia> Depth       =   (-20:-11)*km;\njulia> Data        =   zeros(size(Lon));\njulia> Data_set    =   GeoData(Lat,Lon,Depth,(DataFieldName=Data,))   \nGeoData \n  size  : (10,)\n  lon   ϵ [ 1.0 - 10.0]\n  lat   ϵ [ 11.0 - 20.0]\n  depth ϵ [ -20 km - -11 km]\n  fields: (:DataFieldName,)\n\n\n\n\n\n","category":"type"},{"location":"man/datastructures/#GeophysicalModelGenerator.LonLatDepthGrid","page":"Data Structures","title":"GeophysicalModelGenerator.LonLatDepthGrid","text":"LonLatDepthGrid(Lon::Any, Lat::Any, Depth:Any)\n\nCreates 3D arrays of Lon, Lat, Depth from 1D vectors or numbers\n\nExample 1: Create 3D grid\n\njulia> Lon,Lat,Depth =  LonLatDepthGrid(10:20,30:40,(-10:-1)km);\njulia> size(Lon)\n(11, 11, 10)\n\nExample 2: Create 2D lon/lat grid @ a given depth\n\njulia> Lon,Lat,Depth =  LonLatDepthGrid(10:20,30:40,-50km);\njulia> size(Lon)\n(11, 11)\n\nExample 3: Create 2D lon/depth grid @ a given lat\n\njulia> Lon,Lat,Depth =  LonLatDepthGrid(10:20,30,(-10:-1)km);\njulia> size(Lon)\n(11, 11)\n\nExample 4: Create 1D vertical line @ a given lon/lat point\n\njulia> Lon,Lat,Depth =  LonLatDepthGrid(10,30,(-10:-1)km);\njulia> size(Lon)\n(10, )\n\n\n\n\n\n","category":"function"},{"location":"man/paraview_output/#Paraview-output","page":"Paraview output","title":"Paraview output","text":"","category":"section"},{"location":"man/paraview_output/","page":"Paraview output","title":"Paraview output","text":"We have one main routine to generate Paraview output for data that is either stored in a GeoData structure (that has lat/lon info), or CartData (Cartesian). If GeoData is supplied it is internally automatically converted to the right format. Vectors, such as velocity, are also converted accordingly.","category":"page"},{"location":"man/paraview_output/","page":"Paraview output","title":"Paraview output","text":"GeophysicalModelGenerator.Write_Paraview","category":"page"},{"location":"man/paraview_output/#GeophysicalModelGenerator.Write_Paraview","page":"Paraview output","title":"GeophysicalModelGenerator.Write_Paraview","text":"Write_Paraview(DataSet::CartData, filename=\"test\"; PointsData=false)\n\nWrites a structure with Geodata to a paraview (or VTK) file\n\nExample 1: Write a 3D volume\n\njulia> Lon,Lat,Depth   =   LonLatDepthGrid(10:20,30:40,(-300:25:0)km);\njulia> Data_set        =   GeoData(Lat,Lon,Depth,(Depthdata=Depth,LonData=Lon))  \njulia> Write_Paraview(Data_set, \"test_depth3D\")\n\nExample 2: Horizontal slice @ given depth\n\njulia> Lon,Lat,Depth  =   LonLatDepthGrid(10:20,30:40,10km);\njulia> Data_set       =   GeoData(Lat,Lon,Depth,(Topography=Depth,))  \njulia> Write_Paraview(Data_set, \"test\")\n\nExample 3: Case with topography\n\njulia> Lon,Lat,Depth    =   LonLatDepthGrid(10:20,30:40,10km);\njulia> Depth[2:4,2:4,1] .=  25km     \njulia> Data_set         =   GeoData(Lat,Lon,Depth,(Topography=Depth,))  \njulia> Write_Paraview(Data_set, \"test2\")\n\nExample 4: Profile\n\njulia> Lon,Lat,Depth  =   LonLatDepthGrid(10:20,35,(-300:25:0)km);\njulia> Data_set       =   GeoData(Lat,Lon,Depth,(DataSet=Depth,Depth=Depth))  \njulia> Write_Paraview(Data_set, \"test\")\n\nExample 5: Velocity vectors\n\njulia> Lon,Lat,Depth  =   LonLatDepthGrid(10:20,30:40,10km);\njulia> Ve, Vn, Vz     =   ones(size(Depth)), ones(size(Depth))*0.5, zeros(size(Depth));\njulia> Data_set       =   GeoData(Lat,Lon,Depth,(DataSet=Depth, Velocity=(Ve,Vn,Vz)))\nGeoData \n  size  : (11, 11, 1)\n  lon   ϵ [ 30.0 - 40.0]\n  lat   ϵ [ 10.0 - 20.0]\n  depth ϵ [ 10.0 km - 10.0 km]\n  fields: (:DataSet, :Velocity)  \njulia> Write_Paraview(Data_set, \"test_Velocity\")\n\nExample 6: Unconnected points (e.g., earthquake locations)\n\nNote that these points should be 1D vectors.\n\njulia> Lon,Lat,Depth  =   LonLatDepthGrid(10:5:20,35:2:40,(-300:50:0)km);\njulia> Lon=Lon[:]; Lat=Lat[:]; Depth=Depth[:];\njulia> Data_set       =   GeoData(Lat,Lon,Depth,(DataSet=Depth[:],Depth=Depth*10));  \njulia> Write_Paraview(Data_set, \"test_Points\")\n\n\n\n\n\n","category":"function"},{"location":"man/listfunctions/#List-of-all-functions","page":"List of functions","title":"List of all functions","text":"","category":"section"},{"location":"man/listfunctions/","page":"List of functions","title":"List of functions","text":"This page details the some of the guidelines that should be followed when contributing to this package.","category":"page"},{"location":"man/listfunctions/","page":"List of functions","title":"List of functions","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GeophysicalModelGenerator","category":"page"},{"location":"#GeophysicalModelGenerator","page":"Home","title":"GeophysicalModelGenerator","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GeophysicalModelGenerator.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The main purpose of this package is to simplify the process of going from 1D/2D/3D geophysical data to a 3D consistent models. By simplifying the process of plotting the data, it becomes easier to ","category":"page"},{"location":"","page":"Home","title":"Home","text":"For this we provide the following functionality:","category":"page"},{"location":"","page":"Home","title":"Home","text":"A consistent GeoData data structure, that holds the data sets along with lat/lon/depth information. \nRoutines to generate VTK files from the GeoData structure in order to visualie results in Paraview.\nThe ability to deal with points, 3D volumes, 2D profiles for both scalar and vector values.","category":"page"},{"location":"man/tutorial_load3DSeismicData/#Loading-3D-seismological-data","page":"Load 3D seismic tomography from CSV","title":"Loading 3D seismological data","text":"","category":"section"},{"location":"man/tutorial_load3DSeismicData/#Goal","page":"Load 3D seismic tomography from CSV","title":"Goal","text":"","category":"section"},{"location":"man/tutorial_load3DSeismicData/","page":"Load 3D seismic tomography from CSV","title":"Load 3D seismic tomography from CSV","text":"This explains how to load a 3D seismic data set that is given in CSV format (comma separated ASCII), and plot it in paraview. The example is a S-wave model of the Alps.","category":"page"},{"location":"man/tutorial_load3DSeismicData/#Steps","page":"Load 3D seismic tomography from CSV","title":"Steps","text":"","category":"section"},{"location":"man/tutorial_load3DSeismicData/#.-Download-data","page":"Load 3D seismic tomography from CSV","title":"1. Download data","text":"","category":"section"},{"location":"man/tutorial_load3DSeismicData/#.-Read-data-into-Julia","page":"Load 3D seismic tomography from CSV","title":"2. Read data into Julia","text":"","category":"section"},{"location":"man/tutorial_load3DSeismicData/#.-Reformat-the-data","page":"Load 3D seismic tomography from CSV","title":"3. Reformat the data","text":"","category":"section"},{"location":"man/tutorial_load3DSeismicData/#.-Generate-Paraview-file","page":"Load 3D seismic tomography from CSV","title":"4. Generate Paraview file","text":"","category":"section"},{"location":"man/tutorial_load3DSeismicData/#.-Plotting-data-in-Paraview","page":"Load 3D seismic tomography from CSV","title":"5. Plotting data in Paraview","text":"","category":"section"},{"location":"man/tutorial_load3DSeismicData/","page":"Load 3D seismic tomography from CSV","title":"Load 3D seismic tomography from CSV","text":"Give a step-by-step explanation on how to create the plot in paraview, and how to make horizontal cross-sections etc.","category":"page"},{"location":"man/tutorial_load3DSeismicData/#Julia-script","page":"Load 3D seismic tomography from CSV","title":"Julia script","text":"","category":"section"},{"location":"man/tutorial_load3DSeismicData/","page":"Load 3D seismic tomography from CSV","title":"Load 3D seismic tomography from CSV","text":"The full julia script that does all is given here.","category":"page"}]
}
